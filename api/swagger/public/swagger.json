{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "A service that stores a user and the segments they belong to.",
        "title": "User Segmentation service API",
        "contact": {
            "name": "Olga Shishkina",
            "email": "olenka.shishkina.02@mail.ru"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/api/v1",
    "paths": {
        "/createSegment": {
            "post": {
                "description": "Creates a new segment with the given slug. If this segment was already in the database, return the BadRequest status.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "segment"
                ],
                "summary": "Create a new segment",
                "operationId": "createSegment",
                "parameters": [
                    {
                        "description": "A short name containing only letters, numbers, underscores, or hyphens. Format: ^[\\w-]+$",
                        "name": "slug",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Segment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Segment created successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Segment already exists / missing required 'slug' parameter / invalid format of 'slug' parameter.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deleteSegment": {
            "delete": {
                "description": "Delete the segment with the given slug and all users from it.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "segment"
                ],
                "summary": "Delete segment",
                "operationId": "deleteSegment",
                "parameters": [
                    {
                        "description": "A short name containing only letters, numbers, underscores, or hyphens. Format: ^[\\w-]+$",
                        "name": "slug",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Segment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Segment deleted successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Missing required 'slug' parameter / invalid format of 'slug' parameter.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Segment with the given slug not found.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/getReport/{period}": {
            "get": {
                "description": "Returns the history of events for the given month as a csv file.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Get report file",
                "operationId": "getReport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Month for which you want to display information, in the format 'yyyy-mm'",
                        "name": "period",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report file received successfully."
                    },
                    "400": {
                        "description": "Invalid format for parameter 'period'.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/getUserReport/{period}/{userID}": {
            "get": {
                "description": "Returns a specific user's history of events for the specified month as a csv file.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "report"
                ],
                "summary": "Get a report file for a specific user",
                "operationId": "getUserReport",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Month for which you want to display information, in the format 'yyyy-mm'",
                        "name": "period",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID in uuid format",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report file received successfully."
                    },
                    "400": {
                        "description": "Invalid format for parameter 'period'.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/getUserSegments/{userID}": {
            "get": {
                "description": "Return the list of segments the user is a member of.",
                "tags": [
                    "segment"
                ],
                "summary": "Get user segments",
                "operationId": "getSegments",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID in uuid format",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User segments received successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.SegmentsList"
                        }
                    },
                    "400": {
                        "description": "Invalid format for parameter 'userID'.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/updateUserSegments/{userID}": {
            "post": {
                "description": "Add/remove a user from segments in accordance with the transferred lists for adding and deleting.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "segment"
                ],
                "summary": "Update user segments",
                "operationId": "updateSegments",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User ID in uuid format",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "segments",
                        "name": "segments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information updated successfully.",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid format for parameter 'userID'.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error / Internal Server Error.",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Segment": {
            "type": "object",
            "properties": {
                "slug": {
                    "type": "string",
                    "example": "AVITO_VOICE_MESSAGES"
                }
            }
        },
        "models.SegmentsList": {
            "type": "object",
            "properties": {
                "segments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string"
                }
            }
        },
        "models.UpdateRequest": {
            "type": "object",
            "properties": {
                "segments-to-add": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "segments-to-remove": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}